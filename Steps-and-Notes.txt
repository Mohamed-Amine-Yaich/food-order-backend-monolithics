
step 1 setting up project and dependencies: 
 yarn/npm init :  start a node project by creating a package.json file  in the current dir 
 tsc init  : Created a new tsconfig.json
 adding couple of node dependencies : express nodemon body-parser cors ts-node-dev typescript @types/express @types/cors

 express: node js framework and a robust tooling for creating http servers 
 nodemon: helping tool during development that keep restarting the server(node app) when file changes  
 body-parser: is a middleware library used in node js app,  parse incomming http request body in a more convenient format for your app to work with.
             'body-parser' can handle various types of request bodies, including JSON, URL-encoded, 
              'and multipart/form-data. It examines the Content-Type header of the incoming request and parses the body accordingly.
 cors : Cross-Origin Resource Sharing (CORS) is a crucial concept for enabling or restricting cross-origin HTTP requests in web applications
       =>mean it allow to specify which origin are allow to access resouces on server
 ts-node-dev : dev tool, enhance dev experience by running and watch typescript code in a node js environment 

step 2 prepare project structure :

 -creating serveral dir for sturcturing this project (models,controllers,dto,config,routes,services,middelwares,images)
 dto (data transfer object): for defining the shape of the date that we attend from the request 
 
step 3 connecting to db and adding dependencies :
 yarn add mongoose @types/mongoose 
 create first model vandor (create vandorDoc interface, VandorSchema and create the model using the Schema and the interface with "const model = mongoose.model<modelInterface>('modelName',modelScema")  ) 
 conect to db 

step 4 addin bcrypt @types/bcrypt 
 -encrypt password with some unicode (salt)

 step 4 vandor CRUD ,Vandor login and authentication(jwt and middellware)

 step 5 : adding food(endpoint) to vandor and update vandor get all food of a vandor (endpoint)

 step  6 : upload file with multer 

 step 7 : some code refactor and shopping route and endpoints
        - creating services dir for refactoring the connection to db part and the hole application part
        - adding shopping route and some endpoints for handling some restaurants and foods search 
        -pincode indicate a specific location mean it can be the same for multipule restaurants

step 8 : adding the customer route and endpoints 
       1- customer register/login (public route)
         -for register we need dto interface for user data input but validation is performed manually in controller 
         =>for that we use class validation packages on the customerRegisterInputs dto (check file) 
         class-validator
         class-transformer 
         -after creating a new user Doc send OTP then generatSignature(jwt),then send Response to client
       2-customer authentication (middellware for ensure authenticated user )
       3-private routes => verify / otp / get and update profile
       4-cart (order and payment) (not completed)

step 9 :  deploying monolytics API
      -dockerize dpendency like node, mongo need to run independently each 
        in container for performing certain operation 
      -configure docer compose file to run containers easily through a command 
       reach to services toghether in the same docker network
       -engine x : handle reverse proxy for reaching out the exposed port 
       - setup ci cd server configuration to run our inegration and test coverages 
         right before deploying our artifacts on the cloud (Degital ocean , aws,elastic beanStalk,google cloud)
       -manage containers by adding kubernetes and igress engine x 


some messing steps 

!important step 
step 10 : order transaction and offer : 
         -before palacing an order to vendor or we need to create a transaction record     
         e.g
         -create transaction : or create-payment (trans record) aslo offer is applied when record is created 
         -create order :  get the id of the trans record and create an order and update record
         -adding capability to admin :  adding capability to the admin to get transaction
         
         //delivering part  : 
         -summary  : adding lat lng to vendor for assigning orders to delevery boy
         -adding property to vendor 
         -after creating the order exactly at the create order end point assign the order to the nearest valid delivery boy
         -add new deliveryUser model 
         -create deliveryUser document 
         -adding a validation field to the deliveryUser document that should be updated only with admin for proper validation

         todo  : 
         -admin update delivery to  valid  deliveryUser
         -also codepin to assign only deliveryUser that are including the same area as the vendorc
         -verify the deliveryUser model props => add pincode  and missing props
         
         
 


         
